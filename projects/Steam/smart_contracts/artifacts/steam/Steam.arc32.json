{
    "hints": {
        "createApplication()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "startStream(account,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stopStream()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStreamEndTime()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getWithdrawAmount()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteContract()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc3RlYW0uY29udHJhY3QuU3RlYW0uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 9
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "balance": {
                    "type": "uint64",
                    "key": "balance"
                },
                "endTime": {
                    "type": "uint64",
                    "key": "endTime"
                },
                "isStreaming": {
                    "type": "uint64",
                    "key": "isStreaming"
                },
                "last_start_time": {
                    "type": "uint64",
                    "key": "last_start_time"
                },
                "last_withdrawal_Amount": {
                    "type": "uint64",
                    "key": "last_withdrawal_Amount"
                },
                "last_withdrawal_time": {
                    "type": "uint64",
                    "key": "last_withdrawal_time"
                },
                "recipient": {
                    "type": "bytes",
                    "key": "recipient"
                },
                "startTime": {
                    "type": "uint64",
                    "key": "startTime"
                },
                "streamRate": {
                    "type": "uint64",
                    "key": "streamRate"
                },
                "withdrawnAmount": {
                    "type": "uint64",
                    "key": "withdrawnAmount"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Steam",
        "methods": [
            {
                "name": "createApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "startStream",
                "args": [
                    {
                        "type": "account",
                        "name": "recipient"
                    },
                    {
                        "type": "uint64",
                        "name": "rate"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "stopStream",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getStreamEndTime",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getWithdrawAmount",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "deleteContract",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}